generator client {
    provider = "prisma-client-js"
}

// I'm going to be using standard mysql for the database
datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id              String         @id @default(cuid())
    // I want the usernames to be unique and username is more of a stage name
    username        String         @unique
    email           String         @unique
    emailVerified   DateTime?
    // this is optional if they want to include their actual name
    name            String?
    biography       String?
    profileImage    String
    backgroundImage String
    creatorLinks    CreatorLinks[]
    // I want there to be a premium version of my app so I need to be able to track that and I am only going to have one tier
    isPremium       Boolean
    createdAt       DateTime
    accounts        Account[]
    sessions        Session[]
}

// I want users to have unlimited links so it needs to be a list of list preferably
model CreatorLinks {
    id     String @id @default(cuid())
    link   String
    userId String
    User   User   @relation(fields: [userId], references: [id])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
